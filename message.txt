function equals() {
    local newString="$1";local len=$(countFiles $1);local word=$(echo $newString | cut -d':' -f1);
    local ind=$($2 $word);local ch;local k=`expr $3 + 1`;local string;
    if test "$2" == "linesFile" -o "$2" == "sizeFile" -o "$2" == "typeFile"
        then
        for i in `seq 1 $len`
            do
            word=$(echo $newString | cut -d':' -f"$i")
            if test $(numCompare $($2 $word) $ind) -ne 0
                then
                if test $(countFiles $ch) -ne 1
                    then
                    string=$string$(sortString $ch $k)
                else
                    string="$string$ch"
                fi
                ch=""
                ind=$($2 $word)
            fi
            ch="$ch$word$SEPARATOR"
        done
    else
        for i in `seq 1 $len`
            do
            word=$(echo $newString | cut -d':' -f"$i")
            if test $(stringCompare "$($2 $word)" "$ind") -ne 0
                then
                if test $(countFiles $ch) -ne 1
                    then
                    string=$string$(sortString $ch $k)
                else
                    string="$string$ch"
                fi
                ch=""
                ind=$($2 $word)
            fi
            ch="$ch$word$SEPARATOR"
        done
    fi
    
    if test $(countFiles $ch) -ne 1
        then
        string=$string$(sortString $ch $k)
    else
        string="$string$ch"
    fi
    echo "$string"
}
function sortString {
    # Fonction qui ne prend rien en paramètre,
    # et effectue pour chaque commande passé en entrée, le trie sur la chaine de caractère contenant les fichiers.
    local i="$2";i2=`expr $i + 1`
    local option=${save_tri:i:1};local option2=${save_tri:i2:1};local newString="$1";
    # en fonction du critère du tri appelé...
    case "$option" in 
        # si on appel le critère "n", on exécute la fonction qui trie la chaine par nom des entrées.
        "n") newString=$(sortByOption $1 nameFile);test \! -z $option2 && newString=$(equals $newString nameFile $2);;

        # si on appel le critère "s", on exécute la fonction qui trie la chaine par la taille des entrées.
        "s") newString=$(sortByOption $1 sizeFile);test \! -z $option2 && newString=$(equals $newString sizeFile $2);;

        # si on appel le critère "m", on exécute la fonction qui trie la chaine par la taille des entrées.
        "m") newString=$(sortByOption $1 lastDateFile);test \! -z $option2 && newString=$(equals $newString lastDateFile $2);;

        # si on appel le critère "sl", on exécute la fonction qui trie la chaine par la taille des entrées.
        "l") newString=$(sortByOption $1 linesFile);test \! -z $option2 && newString=$(equals $newString linesFile $2);;

        # si on appel le critère "e", on exécute la fonction qui trie la chaine par la taille des entrées.
        "e") newString=$(sortByOption $1 extensionFile);test \! -z $option2 && newString=$(equals $newString extensionFile $2);;

        # si on appel le critère "e", on exécute la fonction qui trie la chaine par la taille des entrées.
        "t") newString=$(sortByOption $1 typeFile);test \! -z $option2 && newString=$(equals $newString typeFile $2);;

        # si on appel le critère "p", on exécute la fonction qui trie la chaine par la taille des entrées.
        "p") newString=$(sortByOption $1 ownerFile);test \! -z $option2 && newString=$(equals $newString ownerFile $2);;

        # si on appel le critère "g", on exécute la fonction qui trie la chaine par la taille des entrées.
        "g") newString=$(sortByOption $1 groupFile);test \! -z $option2 && newString=$(equals $newString groupFile $2);;
        *) echo "$newString";;
    esac

    # on retourne la chaine trié.
    echo "$newString"

}
